import java.util.*;
@SuppressWarnings("unchecked")
class ArrayStack<E>
{
	final int capacity=100;
	E[] arr=(E[]) new Object[capacity];
	int top=-1;

	boolean isEmpty()
	{
		return top==-1;
	}
	void push(E data)
	{
		top++;
		if(top<capacity)
		{
			arr[top]=data;
		}
		else
			System.out.println("Stack OverFlow");
	}

	E peek()
	{
		if(isEmpty())
		{
			throw new RuntimeException("Stack UnderFlow");
		}
		return arr[top];
	}

	E pop()
	{
		if(isEmpty())
		{
			throw new RuntimeException("Stack UnderFlow");
		}
		E x=arr[top];
		//arr[top]=null;
		top--;
		return x;
		
	}

	void clear()
	{
		//for(int i=0;i<=top;i++)
			//arr[i]=null;
		top=-1;
	}

	boolean search(E data)
	{
		for(int i=0;i<=top;i++)
		{
			if(arr[i]==data);
			return true;
		}
		return false;
	}
	public String toString() // it has to be public specified coz this method is overwride from the object class
	{
		if(isEmpty())
			return "[ ]";
		StringBuffer out = new StringBuffer("[");
        for(int i = 0; i < top; i++)
        out.append(arr[i] + ", ");

        out.append(arr[top] + "]");
        return out.toString();
	}

}
class testArrayStack
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		ArrayStack<Integer> st=new ArrayStack<Integer>();
		for(int i=0;i<10;i++)
		{
			st.push(i);
		}
	
		System.out.println(st);
		for(int i=0;i<5;i++)
		{
			st.pop();
		}
		System.out.println(st);
		st.clear();
		System.out.println(st);



	}
}
